#!/usr/bin/env bash

set -e

unset GIT_DIR

# do nothing except grab env vars. this buildpack exists only to create a default Procfile. see bin/release
build_pack_path=$(cd $(dirname $(dirname $0)); pwd)
env_path=$(cd $3 && pwd)

function output_section() {
  local indentation="----->"
  echo "${indentation} $1"
}

function output_line() {
  local spacing="      "
  echo "${spacing} $1"
}

function export_env_vars() {
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_path" ]; then
    output_section "Will export the following config vars:"
    for e in $(ls $env_path); do
      echo "$e" | grep -E "$whitelist_regex" | grep -vE "$blacklist_regex" &&
      export "$e=$(cat $env_path/$e)"
      :
    done
  fi
}

function export_mix_env() {
  if [ -z "$MIX_ENV" ]; then
    if [ -d $env_path ] && [ -f $env_path/MIX_ENV ]; then
      export MIX_ENV=$(cat $env_path/MIX_ENV)
    else
      export MIX_ENV=${1:-prod}
    fi
  fi

  output_line "* MIX_ENV=${MIX_ENV}"
}

function write_export() {
  output_section "Writing export for multi-buildpack support"

  local export_line="export MIX_CMD=$1"
  echo $export_line > $build_pack_path/export
  cat $build_pack_path/export
}

export_env_vars
export_mix_env

cd $1

set +e
# detect phx.server or phoenix.server
mix help | grep 'mix phx.server' > /dev/null
RESULT=$?
if [ $RESULT -eq 0 ]; then
  MIX_CMD="phx.server"
else
  mix help | grep 'mix phoenix.server' > /dev/null
  if [ $RESULT -eq 0 ]; then
    MIX_CMD="phoenix.server"
  else
    MIX_CMD="run --no-halt"
  fi
fi
set -e

write_export $MIX_CMD

